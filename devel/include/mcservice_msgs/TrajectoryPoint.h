// Generated by gencpp from file mcservice_msgs/TrajectoryPoint.msg
// DO NOT EDIT!


#ifndef MCSERVICE_MSGS_MESSAGE_TRAJECTORYPOINT_H
#define MCSERVICE_MSGS_MESSAGE_TRAJECTORYPOINT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mcservice_msgs/Pose.h>

namespace mcservice_msgs
{
template <class ContainerAllocator>
struct TrajectoryPoint_
{
  typedef TrajectoryPoint_<ContainerAllocator> Type;

  TrajectoryPoint_()
    : time(0)
    , pose()  {
    }
  TrajectoryPoint_(const ContainerAllocator& _alloc)
    : time(0)
    , pose(_alloc)  {
  (void)_alloc;
    }



   typedef int64_t _time_type;
  _time_type time;

   typedef  ::mcservice_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;





  typedef boost::shared_ptr< ::mcservice_msgs::TrajectoryPoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mcservice_msgs::TrajectoryPoint_<ContainerAllocator> const> ConstPtr;

}; // struct TrajectoryPoint_

typedef ::mcservice_msgs::TrajectoryPoint_<std::allocator<void> > TrajectoryPoint;

typedef boost::shared_ptr< ::mcservice_msgs::TrajectoryPoint > TrajectoryPointPtr;
typedef boost::shared_ptr< ::mcservice_msgs::TrajectoryPoint const> TrajectoryPointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mcservice_msgs::TrajectoryPoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mcservice_msgs::TrajectoryPoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mcservice_msgs::TrajectoryPoint_<ContainerAllocator1> & lhs, const ::mcservice_msgs::TrajectoryPoint_<ContainerAllocator2> & rhs)
{
  return lhs.time == rhs.time &&
    lhs.pose == rhs.pose;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mcservice_msgs::TrajectoryPoint_<ContainerAllocator1> & lhs, const ::mcservice_msgs::TrajectoryPoint_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mcservice_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mcservice_msgs::TrajectoryPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mcservice_msgs::TrajectoryPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mcservice_msgs::TrajectoryPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mcservice_msgs::TrajectoryPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mcservice_msgs::TrajectoryPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mcservice_msgs::TrajectoryPoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mcservice_msgs::TrajectoryPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "479ff4a676bfd08768071dc36141e72e";
  }

  static const char* value(const ::mcservice_msgs::TrajectoryPoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x479ff4a676bfd087ULL;
  static const uint64_t static_value2 = 0x68071dc36141e72eULL;
};

template<class ContainerAllocator>
struct DataType< ::mcservice_msgs::TrajectoryPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mcservice_msgs/TrajectoryPoint";
  }

  static const char* value(const ::mcservice_msgs::TrajectoryPoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mcservice_msgs::TrajectoryPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 time\n"
"mcservice_msgs/Pose pose\n"
"\n"
"================================================================================\n"
"MSG: mcservice_msgs/Pose\n"
"float64 latitude\n"
"float64 longitude\n"
"float64 altitude\n"
;
  }

  static const char* value(const ::mcservice_msgs::TrajectoryPoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mcservice_msgs::TrajectoryPoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time);
      stream.next(m.pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrajectoryPoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mcservice_msgs::TrajectoryPoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mcservice_msgs::TrajectoryPoint_<ContainerAllocator>& v)
  {
    s << indent << "time: ";
    Printer<int64_t>::stream(s, indent + "  ", v.time);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::mcservice_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MCSERVICE_MSGS_MESSAGE_TRAJECTORYPOINT_H
